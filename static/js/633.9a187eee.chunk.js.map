{"version":3,"file":"static/js/633.9a187eee.chunk.js","mappings":"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","sources":["components/BaseMap.js","components/Legend.js","components/SearchBar.js","helpers/functions.js","pages/FiltererdJsonData.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { TileLayer, GeoJSON, LayersControl, FeatureGroup, ScaleControl, useMap, useMapEvents } from 'react-leaflet'\n// import indiastates  from '../assets/data/indiaStates.json';\nimport indiaRivers from '../assets/data/indiaRivers.json';\nimport { BasemapLayer, FeatureLayer } from \"react-esri-leaflet\";\n\n\n// import L from 'leaflet';\nimport { FaHome } from \"react-icons/fa\";\n\n\n\nconst layers = [\n  {\n    name: \"Google Map\",\n    url: 'https://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}',\n    subdomains: ['mt0', 'mt1', 'mt2', 'mt3']\n  },\n  // {\n  //   name: \"Open Street Map\",\n  //   url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n  //   subdomains: ['a', 'b', 'c']\n  // },\n  {\n    name: \"Topographic Map\",\n    url: 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',\n    subdomains: ['a', 'b', 'c']\n  },\n  {\n    name: \"Satellite Map\",\n    url: 'https://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}',\n    subdomains: ['mt0', 'mt1', 'mt2', 'mt3']\n  }\n\n]\n\n\n\nconst BaseMap = () => {\n  const [mousePosition, setMousePosition] = useState({ lat: 0, lng: 0 });\n\n  const map = useMap();\n\n  const HandleMouseHover = () => {\n\n\n    useMapEvents({\n      mousemove: (e) => {\n        setMousePosition(e.latlng);\n      },\n    });\n    return null;\n  };\n\n\n\n\n  const handleZoomToCenter = () => {\n    map.setView([23, 84], 5);\n\n  };\n\n\n\n\n  return (\n    <>\n      <LayersControl position=\"topright\" collapsed={true}>\n\n\n        {/*Available Base Maps:  \"Streets\", \"Topographic\", \"Oceans\", \"OceansLabels\", \"NationalGeographic\", \"Physical\", \"Gray\", \"GrayLabels\", \"DarkGray\", \"DarkGrayLabels\", \"Imagery\", \"ImageryLabels\", \"ImageryTransportation\", \"ImageryClarity\", \"ImageryFirefly\", ShadedRelief\", \"ShadedReliefLabels\", \"Terrain\", \"TerrainLabels\" or \"USATopo\" */}\n\n\n      <LayersControl.BaseLayer checked={true} name='Streets'>\n          <BasemapLayer name=\"Streets\" />\n        </LayersControl.BaseLayer>\n\n        {layers.map((layer, index) => {\n          return (\n            <LayersControl.BaseLayer\n              key={index}\n              // checked={index === 0 ? true : false}\n              checked={false}\n              name={layer.name}\n            >\n\n              <TileLayer\n                attribution={layer.attribution}\n                url={layer.url}\n                subdomains={layer.subdomains}\n              />\n            </LayersControl.BaseLayer>\n          )\n        })}\n\n\n\n\n\n\n\n\n\n        {/* <LayersControl.Overlay checked name=\"States Boundary\">\n          <FeatureGroup>\n            \n            <GeoJSON data={indiastates.features} style={{\n              fillColor: 'none',\n              weight: 2,\n              color: 'black',\n              interactive: false\n            }} />\n          </FeatureGroup>\n        </LayersControl.Overlay> */}\n\n\n        <LayersControl.Overlay name=\"Rivers\">\n          <FeatureGroup>\n            <GeoJSON data={indiaRivers.features} style={{\n              fillColor: 'none',\n              weight: 2,\n              color: 'blue',\n              interactive: false\n            }} />\n          </FeatureGroup>\n        </LayersControl.Overlay>\n\n\n      </LayersControl>\n\n      <HandleMouseHover />\n\n      <div\n        className='coordinates_container' >\n        Lat: {mousePosition.lat.toFixed(4)}, Long:{\" \"}\n        {mousePosition.lng.toFixed(4)}\n      </div>\n      <button className='zoom_btn' onClick={handleZoomToCenter}><FaHome /></button>\n      <ScaleControl />\n\n\n\n\n    </>\n  )\n}\n\nexport default BaseMap","import React from 'react'\nconst Legend = () => {\n    return (\n        <>\n\n                <div className=\"legend\">\n                    <div className=\"item-heading\">\n                        <p>Drought Category (based on SPEI)</p>\n                    </div>\n                    {/* <div className=\"legend-item\">\n                        <p className=\"legend-color-value\"> Exceptional</p>\n                        <p className=\"legend-color-value\"> Extreme</p>\n                        <p className=\"legend-color-value\"> Severe</p>\n                        <p className=\"legend-color-value\"> Moderate</p>\n                        <p className=\"legend-color-value\"> Abnormal</p>\n                        <p className=\"legend-color-value\"> Normal</p>\n                    </div> */}\n                    <div className=\"legend-color\">\n                        <i style={{backgroundColor: '#F7FBFF'}}></i>\n                        <i style={{backgroundColor: '#DCEBF6'}}></i>\n                        <i style={{backgroundColor: '#C4DBEE'}}></i>\n                        <i style={{backgroundColor: '#97CAE1'}}></i>\n                        <i style={{backgroundColor: '#60AED4'}}></i>\n                        <i style={{backgroundColor: '#2D92C3'}}></i>\n                        <i style={{backgroundColor: '#0171B2'}}></i>\n                        <i style={{backgroundColor: '#005199'}}></i>\n                        <i style={{backgroundColor: '#003069'}}></i>\n                    </div>\n\n                    <div className=\"legend-item\">\n                        <p className=\"legend-num-value\"> 0</p>\n                        <p className=\"legend-num-value\"> 0.1</p>\n                        <p className=\"legend-num-value\"> 0.2</p>\n                        <p className=\"legend-num-value\"> 0.4</p>\n                        <p className=\"legend-num-value\"> 0.6</p>\n                        <p className=\"legend-num-value\"> 1</p>\n                        <p className=\"legend-num-value\"> 2</p>\n                        <p className=\"legend-num-value\"> 3</p>\n                        <p className=\"legend-num-value\"> 4</p>\n                    </div>\n\n                </div>\n\n        </>\n\n    )\n}\n\nexport default Legend","import React, { useEffect } from 'react'\nimport { useMap } from 'react-leaflet';\nimport { GeoSearchControl, OpenStreetMapProvider } from 'leaflet-geosearch';\nimport 'leaflet-geosearch/dist/geosearch.css';\nimport iconMarker from 'leaflet/dist/images/marker-icon.png';\nimport iconRetina from 'leaflet/dist/images/marker-icon-2x.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\nimport L from 'leaflet';\n\n// Merge custom icon options with default options\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: iconRetina,\n  iconUrl: iconMarker,\n  shadowUrl: iconShadow,\n});\n\nconst SearchBar = () => {\n  const map = useMap();\n\n  useEffect(() => {\n    const provider = new OpenStreetMapProvider();\n    const searchControl = new GeoSearchControl({\n      provider,\n      style: 'bar',\n    });\n\n    map.addControl(searchControl);\n\n    return () => {\n      map.removeControl(searchControl);\n    };\n  }, [map]);\n\n  return (\n    null\n  )\n}\n\nexport default SearchBar","import * as L from \"leaflet\";\n\nexport const mapCenter=[23, 84]\nexport const setInitialMapZoom = ()=> {\n    var viewportWidth = window.innerWidth;\n    var mapZoom;\n    if (viewportWidth <= [767]) {\n        mapZoom = [4];\n    } if (viewportWidth >= [768]) {\n        mapZoom = [4.5];\n    } if (viewportWidth >= [1600]) {\n        mapZoom = [5];\n    }\n    return mapZoom;\n}\n\nexport const setDragging = () => {\n    var viewportWidth = window.innerWidth;\n    var dragging;\n    if (viewportWidth <= [767]) {\n        dragging = false;\n    } if (viewportWidth >= [768]) {\n        dragging = true;\n    }\n    return dragging;\n}\nexport const maxBounds = L.latLngBounds(\n    L.latLng(4, 60),  \n    L.latLng(45, 110)  \n);","import React, { useEffect } from 'react';\nimport { GeoJSON, useMap } from 'react-leaflet';\nimport * as L from 'leaflet';\nimport { mapCenter, setInitialMapZoom } from '../helpers/functions';\n\nconst FiltererdJsonData = ({\n    selectedState,\n    selectedDistrict,\n    // DistrictStyle,\n    filteredIndiaDistrict,\n    // DistrictOnEachfeature,\n}) => {\n    const map = useMap();\n\n    useEffect(() => {\n        if (filteredIndiaDistrict.features.length > 0) {\n            const bounds = filteredIndiaDistrict.features.reduce((acc, feature) => {\n                const featureBounds = L.geoJSON(feature.geometry).getBounds();\n                return acc.extend(featureBounds);\n            }, new L.LatLngBounds());\n\n            map.flyToBounds(bounds);\n        }else{\n            map.flyTo(mapCenter,setInitialMapZoom());\n        }\n    }, [filteredIndiaDistrict, map]);\n\n\n    return (\n        <GeoJSON\n            key={`${selectedState}-${selectedDistrict}`}\n            // style={DistrictStyle}\n            data={filteredIndiaDistrict.features}\n            // onEachFeature={DistrictOnEachfeature}\n            style={{ fillColor: 'none', weight: 4, color: 'yellow' }}\n        />\n    );\n};\n\nexport default FiltererdJsonData;\n"],"names":["layers","name","url","subdomains","BaseMap","mousePosition","setMousePosition","useState","lat","lng","map","useMap","HandleMouseHover","useMapEvents","mousemove","e","latlng","_jsxs","_Fragment","children","LayersControl","position","collapsed","_jsx","BaseLayer","checked","BasemapLayer","layer","index","TileLayer","attribution","Overlay","FeatureGroup","GeoJSON","data","indiaRivers","style","fillColor","weight","color","interactive","className","toFixed","onClick","handleZoomToCenter","setView","FaHome","ScaleControl","Legend","backgroundColor","L","Default","mergeOptions","iconRetinaUrl","iconRetina","iconUrl","iconMarker","shadowUrl","iconShadow","SearchBar","useEffect","provider","OpenStreetMapProvider","searchControl","GeoSearchControl","addControl","removeControl","mapCenter","setInitialMapZoom","mapZoom","viewportWidth","window","innerWidth","setDragging","dragging","maxBounds","_ref","selectedState","selectedDistrict","filteredIndiaDistrict","features","length","bounds","reduce","acc","feature","featureBounds","geometry","getBounds","extend","flyToBounds","flyTo","concat"],"sourceRoot":""}