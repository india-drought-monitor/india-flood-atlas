{"version":3,"file":"static/js/839.96f7e9ab.chunk.js","mappings":"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","sources":["components/TimeSeriesCharts.js","pages/AnnualFloodPage.js"],"sourcesContent":["import React from 'react';\nimport Chart from 'react-apexcharts';\n\nconst TimeSeriesCharts = ({ selectedChartData, selectedFeatureID }) => {\n    const chartData = selectedChartData && selectedChartData.find(item => item.ID === selectedFeatureID);\n\n    // Extract years and corresponding flood areas from chart data\n    const years = chartData && Object.keys(chartData).filter(key => key !== 'ID').map(year => parseInt(year));\n    const floodAreas = chartData && Object.values(chartData).filter(val => typeof val === 'number').map(val => val.toFixed(2));\n\n    // Prepare the series data for the chart\n    const seriesData = [{\n        name: 'Flooded Area (km²)',\n        data: floodAreas\n    }];\n\n    \n\n    return (\n        <Chart\n            options={{\n                chart: {\n                    type: 'line',\n                    stacked: false,\n                zoom: {\n                  type: 'x',\n                  enabled: true,\n                  autoScaleYaxis: true\n                },\n                toolbar: {\n                    autoSelected: 'zoom'\n                  },\n                  dataLabels: {\n                    enabled: false\n                  },\n\n\n                },\n                xaxis: {\n                    categories: years,\n                    title: {\n                        text: 'Time',\n                        offsetX: 10\n                    }\n                },\n                yaxis: {\n                    title: {\n                        text: 'Flooded Area (km²)',\n                        offsetY: 10\n                    }\n                },\n                responsive: [{\n                    breakpoint: 480,\n                    options: {\n                        legend: {\n                            position: 'bottom',\n                            offsetX: -10,\n                            offsetY: 0\n                        }\n                    }\n                }]\n            }}\n            series={seriesData}\n            type=\"line\"\n            width=\"100%\"\n            height=\"100%\"\n        />\n    );\n};\n\nexport default TimeSeriesCharts;\n","import React, { useEffect, useRef, useState } from 'react'\nimport { MapContainer, GeoJSON } from 'react-leaflet'\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport { Autocomplete, TextField } from \"@mui/material\";\nimport BaseMap from '../components/BaseMap';\nimport SearchBar from '../components/SearchBar';\nimport IndiaDistricts from '../assets/data/IndiaDistricts.json';\nimport Legend from '../components/Legend';\nimport IndiaStates from '../assets/data/IndiaStates.json';\nimport { Box } from \"@mui/system\";\nimport FiltererdJsonData from './FiltererdJsonData';\nimport ExportMapButton from './ExportMapButton';\nimport { mapCenter, maxBounds, setDragging, setInitialMapZoom } from '../helpers/functions';\nimport Districts_annual_flood_frac from \"../assets/data/Districts_annual_flood_frac.json\"\nimport Districts_annual_flood_area from \"../assets/data/Districts_annual_flood_area.json\"\nimport States_annual_flood_frac from \"../assets/data/States_annual_flood_frac.json\"\nimport States_annual_flood_area from \"../assets/data/States_annual_flood_area.json\"\nimport TimeSeriesCharts from '../components/TimeSeriesCharts';\n\n\nconst AnnualFloodPage = () => {\n    const [selectedYear, setSelectedYear] = useState(null);\n    const [selectedView, setSelectedView] = useState(\"\")\n    const [loading, setLoading] = useState(false);\n    const [districtList, setDistrictList] = useState([]);\n    const [filteredIndiaDistrict, setFilteredIndiaDistrict] = useState(null);\n    const [selectedState, setSelectedState] = useState([]);\n    const [selectedDistrict, setSelectedDistrict] = useState([]);\n    const [showTimeseries, setShowTimeseries] = useState(false)\n    const mapContainerRef = useRef(null);\n    const [selectedFeatureID, setSelectedFeatureID] = useState(1);\n\n\n    let selectedMapData;\n    let selectedChartData;\n    let selectedGeoJSonData;\n\n    if (selectedView === 'District Wise') {\n        selectedMapData = Districts_annual_flood_frac;\n        selectedChartData = Districts_annual_flood_area;\n        selectedGeoJSonData = IndiaDistricts\n    } else if (selectedView === 'State Wise') {\n        selectedMapData = States_annual_flood_frac;\n        selectedChartData = States_annual_flood_area;\n        selectedGeoJSonData = IndiaStates\n    } else {\n        selectedMapData = null\n        selectedChartData = null\n        selectedChartData = null\n    }\n\n\n\n\n    const handleShowTimeseries = () => {\n        setShowTimeseries(!showTimeseries)\n    }\n\n    const handleStateSelect = (event, value) => {\n        let items = IndiaDistricts.features.filter((item) => item.properties.STATE === value);\n        items = [...new Set(items.map((item) => item))];\n        items.sort();\n\n        setDistrictList(items);\n        setSelectedState(value)\n\n        let filteredStateFeatures = selectedGeoJSonData.features.filter((feature) => feature.properties.STATE === value);\n\n\n        setFilteredIndiaDistrict({\n            type: \"FeatureCollection\",\n            features: filteredStateFeatures,\n        });\n\n        // mapRef.current.flyToBounds(bounds, { padding: [10, 10] });\n\n\n\n    };\n\n\n\n\n    const handleDistrictSelect = (event, value) => {\n        setSelectedDistrict(value)\n\n        let filteredDistrictFeatures = IndiaDistricts.features.filter((feature) => feature.properties.DISTRICT === value && feature.properties.STATE === selectedState);\n\n        setFilteredIndiaDistrict({\n            type: \"FeatureCollection\",\n            features: filteredDistrictFeatures,\n        });\n\n    };\n\n\n    const handleYearChange = (event, value) => {\n        setSelectedYear(value);\n    };\n\n\n    const handleViewSelection = (event, value) => {\n        setSelectedView(value);\n    };\n\n\n\n\n\n\n\n\n    function DistrictOnEachfeature(feature, layer) {\n        layer.on('mouseover', function () {\n            const DataItem = selectedMapData.find(item => item.ID === feature.properties.ID);\n            if (selectedYear && feature.properties && feature.properties.ID) {\n                let popupContent;\n                if (selectedView === 'District Wise') {\n                    popupContent = `\n          <div>\n            ID: ${feature.properties.ID}<br/>\n            DISTRICT: ${feature.properties.DISTRICT}<br/>\n            STATE: ${feature.properties.STATE}<br/>\n            Flooded Area (Fraction): ${DataItem ? DataItem[selectedYear] : null}<br/>\n          </div>\n        `;\n                } else if (selectedView === 'State Wise') {\n                    popupContent = `\n          <div>\n            ID: ${feature.properties.ID}<br/>\n            STATE: ${feature.properties.STATE}<br/>\n            Flooded Area (Fraction): ${DataItem ? DataItem[selectedYear] : null}<br/>\n          </div>\n        `;\n                }\n                layer.bindTooltip(popupContent, { sticky: true });\n            }\n            layer.openTooltip();\n        });\n\n        layer.on('mouseout', function () {\n            layer.closeTooltip();\n        });\n    }\n\n\n\n    const DistrictDensity = (density => {\n        return density > 4 ? '#003069'\n            : density > 3 ? '#005199'\n                : density > 2 ? '#0171B2'\n                    : density > 1 ? '#2D92C3'\n                        : density > 0.6 ? '#60AED4'\n                            : density > 0.4 ? '#97CAE1'\n                                : density > 0.2 ? '#C4DBEE'\n                                    : density > 0.1 ? '#DCEBF6'\n                                        : '#F7FBFF';\n    })\n\n\n\n\n\n    const DistrictStyle = (feature => {\n\n        const getDensityFromSummerData = (id) => {\n            const DataItem = selectedMapData.find(item => item.ID === id);\n            return DataItem ? DataItem[selectedYear] : null;\n\n        };\n\n        const density = getDensityFromSummerData(feature.properties.ID);\n        return ({\n            fillColor: DistrictDensity(density),\n            weight: 1,\n            opacity: 1,\n            color: 'black',\n            dashArray: '2',\n            fillOpacity: 1\n        });\n\n\n\n    });\n\n\n\n\n    return (\n        <div className='dasboard_page_container'>\n\n            <div className='main_dashboard'>\n                <div className='left_panel'>\n\n                    <div className='border border-secondary p-2 mb-2'>\n                        <Autocomplete\n                            value={selectedView}\n                            onChange={handleViewSelection}\n                            id=\"session\"\n                            options={[\n                                \"State Wise\",\n                                \"District Wise\",\n                            ]}\n                            renderInput={(params) => (\n                                <TextField {...params} className=\"form-select mb-3\" label=\"Select Dataset\" />\n                            )}\n                        />\n\n\n                    </div>\n\n                    <div className='border border-secondary p-2 mb-2'>\n                        <Autocomplete\n                            onChange={(event, value) => handleYearChange(event, value)}\n                            id=\"year\"\n                            options={Array.from({ length: 2020 - 1900 }, (_, index) => `${1901 + index}`)}\n                            noOptionsText=\"No Available Data\"\n                            renderOption={(props, year) => (\n                                <Box component=\"li\" {...props} key={year}\n                                    sx={{\n                                        fontSize: \"14px\",\n                                    }}>\n                                    {year}\n                                </Box>\n                            )}\n                            renderInput={(params) => (\n                                <TextField\n                                    {...params}\n                                    label=\"Select Year\"\n                                    className=\"form-select\"\n                                    aria-label=\"Default select example\"\n                                    value={selectedYear}\n                                />\n                            )}\n                        />\n\n                    </div>\n\n\n\n                    <div className='border border-secondary p-2 mb-2'>\n                        <label className=\"form-label\">Filter Data:</label>\n\n                        <Autocomplete\n                            style={{ marginBottom: \"20px\" }}\n                            onChange={(event, value) => handleStateSelect(event, value)}\n                            id=\"state\"\n                            getOptionLabel={(state) => `${state}`}\n                            options={[...new Set(IndiaStates.features.map((item) => item.properties.STATE))]}\n                            isOptionEqualToValue={(option, value) => option.Name === value.Name}\n                            noOptionsText={\"No Available Data\"}\n                            disabled={!selectedView}\n                            renderOption={(props, state) => (\n                                <Box component=\"li\" {...props} key={state}\n                                    sx={{\n                                        fontSize: \"14px\",\n                                    }}>\n                                    {state}\n                                </Box>\n                            )}\n                            renderInput={(params) => <TextField {...params} label=\"Search State\" />}\n                        />\n\n                        {selectedView === \"District Wise\" && (\n                            <Autocomplete\n                                style={{ marginBottom: \"20px\" }}\n                                onChange={(event, value) => handleDistrictSelect(event, value)}\n                                id=\"district\"\n                                getOptionLabel={(district) => `${district}`}\n                                options={[...new Set(districtList.map((item) => item.properties.DISTRICT))]}\n                                isOptionEqualToValue={(option, value) => option.Name === value.Name}\n                                noOptionsText={\"No Available Data\"}\n                                disabled={districtList.length === 0}\n                                renderOption={(props, district) => (\n                                    <Box component=\"li\" {...props} key={district}\n                                        sx={{\n                                            fontSize: \"14px\",\n                                        }}>\n                                        {district}\n                                    </Box>\n                                )}\n                                renderInput={(params) => <TextField {...params}\n\n                                    label=\"Search District\" />}\n                            />\n                        )}\n\n\n                    </div>\n\n                    <div className='panel_button'>\n                        <button type='button' disabled={!selectedView} onClick={handleShowTimeseries}>\n                            {showTimeseries ? \"Hide Timeseries\" : \"Show Timeseries\"}\n                        </button>\n                    </div>\n                    \n                    {!selectedView && (\n                        <p style={{fontSize:\"16px\", color:\"red\"}}>Please select datset for timeseries</p>\n                    )}\n\n\n\n                </div>\n\n\n\n                <div className='right_panel' ref={mapContainerRef}>\n\n                    <MapContainer\n                        fullscreenControl={true}\n\n                        center={mapCenter}\n                        style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n                        zoom={setInitialMapZoom()}\n                        maxBounds={maxBounds}\n                        // maxZoom={8}\n                        minZoom={setInitialMapZoom() - 1}\n                        keyboard={false}\n                        dragging={setDragging()}\n                        // attributionControl={false}\n                        // scrollWheelZoom={false}\n                        doubleClickZoom={false}\n                    >\n                        <SearchBar />\n                        {/* <ExportMapButton mapContainerRef={mapContainerRef} selectedYear={selectedYear} selectedSession={selectedView} /> */}\n\n\n                        {showTimeseries && (\n                            <div className='time_series_container'>\n                                <TimeSeriesCharts selectedChartData={selectedChartData} selectedFeatureID={selectedFeatureID} />\n                            </div>\n                        )}\n\n\n                        {selectedView && selectedYear && selectedMapData && (\n                            <>\n\n                                {filteredIndiaDistrict && (\n                                    <FiltererdJsonData\n                                        selectedState={selectedState}\n                                        selectedDistrict={selectedDistrict}\n                                        // DistrictStyle={DistrictStyle}\n                                        filteredIndiaDistrict={filteredIndiaDistrict}\n                                    // DistrictOnEachfeature={DistrictOnEachfeature}\n                                    />\n\n\n                                )}\n\n                                <GeoJSON\n                                    key={`${selectedView}+${selectedYear}`}\n                                    style={DistrictStyle}\n                                    data={selectedGeoJSonData.features}\n                                    onEachFeature={DistrictOnEachfeature}\n                                />\n\n\n                                {/* <GeoJSON data={IndiaStates.features} style={{\n                                    fillColor: 'none',\n                                    weight: 2,\n                                    color: 'black',\n                                    interactive: false\n                                }} /> */}\n\n\n                                <div className=\"legend-panel-desktop\">\n                                    <Legend />\n                                </div>\n                            </>\n\n\n                        )}\n\n\n                        <BaseMap />\n\n                    </MapContainer>\n\n\n                    <div className=\"legend-panel-mobile\">\n                        <Legend />\n                    </div>\n\n\n                    {loading && (\n                        <div className='map_layer_loader_container_desktop'>\n                            <div className=\"map_loader_container\">\n                                <span className=\"map_loader\"></span>\n                            </div>\n\n                        </div>\n\n                    )}\n\n                </div>\n\n\n                {loading && (\n                    <div className='map_layer_loader_container_mobile'>\n                        <div className=\"map_loader_container\">\n                            <span className=\"map_loader\"></span>\n                        </div>\n\n                    </div>\n\n                )}\n\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default AnnualFloodPage"],"names":["_ref","selectedChartData","selectedFeatureID","chartData","find","item","ID","years","Object","keys","filter","key","map","year","parseInt","seriesData","name","data","values","val","toFixed","_jsx","Chart","options","chart","type","stacked","zoom","enabled","autoScaleYaxis","toolbar","autoSelected","dataLabels","xaxis","categories","title","text","offsetX","yaxis","offsetY","responsive","breakpoint","legend","position","series","width","height","AnnualFloodPage","selectedYear","setSelectedYear","useState","selectedView","setSelectedView","loading","setLoading","districtList","setDistrictList","filteredIndiaDistrict","setFilteredIndiaDistrict","selectedState","setSelectedState","selectedDistrict","setSelectedDistrict","showTimeseries","setShowTimeseries","mapContainerRef","useRef","setSelectedFeatureID","selectedMapData","selectedGeoJSonData","Districts_annual_flood_frac","Districts_annual_flood_area","IndiaDistricts","States_annual_flood_frac","States_annual_flood_area","IndiaStates","DistrictDensity","density","className","children","_jsxs","Autocomplete","value","onChange","handleViewSelection","event","id","renderInput","params","TextField","label","handleYearChange","Array","from","length","_","index","concat","noOptionsText","renderOption","props","_createElement","Box","component","sx","fontSize","style","marginBottom","handleStateSelect","items","features","properties","STATE","Set","sort","filteredStateFeatures","feature","getOptionLabel","state","isOptionEqualToValue","option","Name","disabled","handleDistrictSelect","filteredDistrictFeatures","DISTRICT","district","onClick","handleShowTimeseries","color","ref","MapContainer","fullscreenControl","center","mapCenter","backgroundColor","border","margin","setInitialMapZoom","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","SearchBar","TimeSeriesCharts","_Fragment","FiltererdJsonData","GeoJSON","DataItem","getDensityFromSummerData","fillColor","weight","opacity","dashArray","fillOpacity","onEachFeature","layer","on","popupContent","bindTooltip","sticky","openTooltip","closeTooltip","Legend","BaseMap"],"sourceRoot":""}