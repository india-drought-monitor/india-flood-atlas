{"version":3,"file":"static/js/273.e678d378.chunk.js","mappings":"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","sources":["pages/MaxFloodPage.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport { MapContainer, GeoJSON } from 'react-leaflet'\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport { Autocomplete, TextField } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\n\nimport BaseMap from '../components/BaseMap';\nimport SearchBar from '../components/SearchBar';\nimport IndiaDistricts from '../assets/data/IndiaDistricts.json';\nimport IndiaStates from '../assets/data/IndiaStates.json';\nimport { mapCenter, maxBounds, setDragging, setInitialMapZoom } from '../helpers/functions';\nimport Districts_max_flood_area_frac from \"../assets/data/Districts_max_flood_area_frac.json\"\nimport States_max_flood_area_frac from \"../assets/data/States_max_flood_area_frac.json\"\nimport FiltererdJsonData from './FiltererdJsonData';\nimport Legend from '../components/Legend';\n\n\nconst MaxFloodPage = () => {\n    const [selectedView, setSelectedView] = useState(\"District Wise\")\n\n    const [districtList, setDistrictList] = useState([]);\n    const [selectedState, setSelectedState] = useState([]);\n    const [filteredIndiaDistrict, setFilteredIndiaDistrict] = useState(null);\n    const [selectedDistrict, setSelectedDistrict] = useState([]);\n\n\n\n    const handleViewSelection = (event, value) => {\n        setSelectedView(value);\n        setFilteredIndiaDistrict(null)\n        setFilteredIndiaDistrict(null)\n    };\n\n    let selectedData;\n    let selectedGeoJSonData;\n\n    if (selectedView === 'District Wise') {\n        selectedData = Districts_max_flood_area_frac;\n        selectedGeoJSonData = IndiaDistricts\n    } else if (selectedView === 'State Wise') {\n        selectedData = States_max_flood_area_frac;\n        selectedGeoJSonData = IndiaStates\n    } else {\n        selectedData = null\n        selectedData = null\n    }\n    // console.log(selectedGeoJSonData)\n\n\n\n    const handleStateSelect = (event, value) => {\n        let items = IndiaDistricts.features.filter((item) => item.properties.STATE === value);\n        items = [...new Set(items.map((item) => item))];\n        items.sort();\n\n        setDistrictList(items);\n        setSelectedState(value)\n\n        let filteredStateFeatures = selectedGeoJSonData.features.filter((feature) => feature.properties.STATE === value);\n\n\n        setFilteredIndiaDistrict({\n            type: \"FeatureCollection\",\n            features: filteredStateFeatures,\n        });\n\n        // mapRef.current.flyToBounds(bounds, { padding: [10, 10] });\n\n\n\n    };\n\n\n    const handleDistrictSelect = (event, value) => {\n        setSelectedDistrict(value)\n\n        let filteredDistrictFeatures = IndiaDistricts.features.filter((feature) => feature.properties.DISTRICT === value && feature.properties.STATE === selectedState);\n\n        setFilteredIndiaDistrict({\n            type: \"FeatureCollection\",\n            features: filteredDistrictFeatures,\n        });\n\n    };\n\n\n\n\n    function DistrictOnEachfeature(feature, layer) {\n        if (selectedData) {\n\n            // layer.on('click', function (e) {\n            //     // setSelectedFeatureName(feature.properties.NAME);\n            //     setFilteredIndiaDistrict({\n            //         type: \"FeatureCollection\",\n            //         features: feature,\n            //     });\n\n            // });\n\n            layer.on('mouseover', function (e) {\n\n                const DataItem = selectedData.find(item => item.ID === feature.properties.ID);\n                if (feature.properties && feature.properties.ID) {\n                    let popupContent;\n                    if (selectedView === 'District Wise') {\n                        popupContent = `\n              <div>\n                ID: ${feature.properties.ID}<br/>\n                DISTRICT: ${feature.properties.DISTRICT}<br/>\n                STATE: ${feature.properties.STATE}<br/>\n                Max Flooded Area: ${DataItem ? DataItem.MaxArea : null}<br/>\n                Max Flooded Fraction: ${DataItem ? DataItem.MaxFraction : null}<br/>\n              </div>\n            `;\n                    } else if (selectedView === 'State Wise') {\n                        popupContent = `\n              <div>\n                ID: ${feature.properties.ID}<br/>\n                STATE: ${feature.properties.STATE}<br/>\n                Max Flooded Area: ${DataItem ? DataItem.MaxArea : null}<br/>\n                Max Flooded Fraction: ${DataItem ? DataItem.MaxFraction : null}<br/>\n              </div>\n            `;\n                    }\n\n\n                    layer.bindTooltip(popupContent, { sticky: true });\n                }\n                layer.openTooltip();\n\n            }\n\n            );\n\n            layer.on('mouseout', function () {\n                layer.closeTooltip();\n            });\n        }\n    }\n\n\n\n    const DistrictDensity = (density => {\n        return density > 4 ? '#003069'\n            : density > 3 ? '#005199'\n                : density > 2 ? '#0171B2'\n                    : density > 1 ? '#2D92C3'\n                        : density > 0.6 ? '#60AED4'\n                            : density > 0.4 ? '#97CAE1'\n                                : density > 0.2 ? '#C4DBEE'\n                                    : density > 0.1 ? '#DCEBF6'\n                                        : '#F7FBFF';\n    })\n\n\n\n\n    const DistrictStyle = (feature => {\n\n        const getDensityFromSummerData = (id) => {\n            const DataItem = selectedData.find(item => item.ID === id);\n            return DataItem ? DataItem.MaxFraction : null;\n\n        };\n\n        const density = getDensityFromSummerData(feature.properties.ID);\n        return ({\n            fillColor: DistrictDensity(density),\n            weight: 1,\n            opacity: 1,\n            color: 'black',\n            dashArray: '2',\n            fillOpacity: 1\n        });\n\n\n\n    });\n\n\n\n\n\n    return (\n        <div className='dasboard_page_container'>\n\n            <div className='main_dashboard'>\n                <div className='left_panel'>\n                    <div className='border border-secondary p-2 mb-2'>\n                        <Autocomplete\n                            value={selectedView}\n                            onChange={(event, value) => handleViewSelection(event, value)}\n                            id=\"selectedView\"\n                            isOptionEqualToValue={(option, value) => option.Name === value.Name}\n                            options={[\n                                \"State Wise\",\n                                \"District Wise\",\n                            ]}\n                            renderOption={(props, state) => (\n                                <Box component=\"li\" {...props} key={state}\n                                    sx={{\n                                        fontSize: \"14px\",\n                                    }}>\n                                    {state}\n                                </Box>\n                            )}\n                            renderInput={(params) => (\n                                <TextField {...params} className=\"form-select mb-3\"\n                                    label=\"Select Dataset\"\n                                    value={selectedView}\n                                    defaultValue={selectedView}\n                                />\n                            )}\n                        />\n\n\n                    </div>\n\n                    <div className='border border-secondary p-2 mb-2'>\n                        <label className=\"form-label\">Filter Data:</label>\n\n                        <Autocomplete\n                            style={{ marginBottom: \"20px\" }}\n                            onChange={(event, value) => handleStateSelect(event, value)}\n                            id=\"state\"\n                            getOptionLabel={(state) => `${state}`}\n                            options={[...new Set(IndiaStates.features.map((item) => item.properties.STATE))]}\n                            isOptionEqualToValue={(option, value) => option.Name === value.Name}\n                            noOptionsText={\"No Available Data\"}\n                            disabled={!selectedView}\n                            renderOption={(props, state) => (\n                                <Box component=\"li\" {...props} key={state}\n                                    sx={{\n                                        fontSize: \"14px\",\n                                    }}>\n                                    {state}\n                                </Box>\n                            )}\n                            renderInput={(params) => <TextField {...params} label=\"Search State\" />}\n                        />\n\n                        {selectedView === \"District Wise\" && (\n                            <Autocomplete\n                                style={{ marginBottom: \"20px\" }}\n                                onChange={(event, value) => handleDistrictSelect(event, value)}\n                                id=\"district\"\n                                getOptionLabel={(district) => `${district}`}\n                                options={[...new Set(districtList.map((item) => item.properties.DISTRICT))]}\n                                isOptionEqualToValue={(option, value) => option.Name === value.Name}\n                                noOptionsText={\"No Available Data\"}\n                                disabled={districtList.length === 0}\n                                renderOption={(props, district) => (\n                                    <Box component=\"li\" {...props} key={district}\n                                        sx={{\n                                            fontSize: \"14px\",\n                                        }}>\n                                        {district}\n                                    </Box>\n                                )}\n                                renderInput={(params) => <TextField {...params}\n\n                                    label=\"Search District\" />}\n                            />\n                        )}\n\n\n\n\n                    </div>\n\n\n                </div>\n\n\n\n                <div className='right_panel'>\n                    <MapContainer\n                        fullscreenControl={true}\n\n                        center={mapCenter}\n                        style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n                        zoom={setInitialMapZoom()}\n                        maxBounds={maxBounds}\n                        // maxZoom={8}\n                        minZoom={setInitialMapZoom()}\n                        keyboard={false}\n                        dragging={setDragging()}\n                        // attributionControl={false}\n                        // scrollWheelZoom={false}\n                        doubleClickZoom={false}\n                    >\n                        <SearchBar />\n\n\n                        {filteredIndiaDistrict && (\n                            <FiltererdJsonData\n                                selectedState={selectedState}\n                                selectedDistrict={selectedDistrict}\n                                // DistrictStyle={DistrictStyle}\n                                filteredIndiaDistrict={filteredIndiaDistrict}\n                            // DistrictOnEachfeature={DistrictOnEachfeature}\n                            />\n\n\n                        )}\n\n                        <GeoJSON\n                            key={selectedView}\n                            style={DistrictStyle}\n                            data={selectedGeoJSonData}\n                            onEachFeature={DistrictOnEachfeature}\n                        />\n\n\n\n\n\n\n\n\n                        <div className=\"legend-panel-desktop\">\n                            <Legend />\n                        </div>\n\n\n\n\n                        <BaseMap />\n\n                    </MapContainer>\n\n                    <div className=\"legend-panel-mobile\">\n                        <Legend />\n                    </div>\n\n                </div>\n            </div>\n        </div>\n\n    )\n}\n\nexport default MaxFloodPage"],"names":["MaxFloodPage","selectedView","setSelectedView","useState","districtList","setDistrictList","selectedState","setSelectedState","filteredIndiaDistrict","setFilteredIndiaDistrict","selectedDistrict","setSelectedDistrict","selectedData","selectedGeoJSonData","Districts_max_flood_area_frac","IndiaDistricts","States_max_flood_area_frac","IndiaStates","DistrictDensity","density","_jsx","className","children","_jsxs","Autocomplete","value","onChange","event","handleViewSelection","id","isOptionEqualToValue","option","Name","options","renderOption","props","state","_createElement","Box","component","key","sx","fontSize","renderInput","params","TextField","label","defaultValue","style","marginBottom","handleStateSelect","items","features","filter","item","properties","STATE","Set","map","sort","filteredStateFeatures","feature","type","getOptionLabel","concat","noOptionsText","disabled","handleDistrictSelect","filteredDistrictFeatures","DISTRICT","district","length","MapContainer","fullscreenControl","center","mapCenter","width","height","backgroundColor","border","margin","zoom","setInitialMapZoom","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","SearchBar","FiltererdJsonData","GeoJSON","DataItem","find","ID","MaxFraction","getDensityFromSummerData","fillColor","weight","opacity","color","dashArray","fillOpacity","data","onEachFeature","layer","on","e","popupContent","MaxArea","bindTooltip","sticky","openTooltip","closeTooltip","Legend","BaseMap"],"sourceRoot":""}